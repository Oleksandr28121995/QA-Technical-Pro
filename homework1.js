// 1) 'number' + 3 + 3
let result1 = 'number' + 3 + 3;
console.log(result1);
/*
У JavaScript операції виразу виконуються зліва направо, існуючи в порядку їх написання в виразі.
1. 'number' + 3: Рядок 'number' додається до числа 3, утворюючи рядок 'number3'.
2. 'number3' + 3: Потім цей рядок 'number3' додається до наступного числа 3, утворюючи рядок 'number33'.
У даному випадку, оскільки один з операндів - рядок, JavaScript вирішує використати операцію конкатенації
для об'єднання обох операндів у рядок.

Консоль виводить: 'number33'
 */


// 2) null + 3
let result2 = null + 3
console.log(result2);
/*
Коли null використовується в арифметичному виразі, JavaScript автоматично конвертує його в число, яке дорівнює 0.
Тут null перетворюється в 0, і потім до цього числа додається 3, отримуючи результат 3.
Консоль виводить: 3
 */


// 3) 5 && "qwerty"
let result3 = 5 && "qwerty"
console.log(result3);
/*
У випадку використання оператора &&, якщо обидва операнди є істинними, він повертає значення другого операнду.
Якщо один з операндів є ложним, то він повертає значення першого ложного операнду.
У виразі 5 && "qwerty", обидва операнди є істинними.
Таким чином, результатом цього виразу буде значення другого операнду, тобто рядок "qwerty".
Консоль виводить: "qwerty"
 */


// 4) +'40' + +'2' + "hillel"
let result4 = +'40' + +'2' + "hillel";
console.log(result4);
/*
В цьому виразі використовуються унарні плюси (+), які конвертують рядки в числа.
+'40': Унарний плюс перед рядком '40' конвертує його в число 40.
+'2': Унарний плюс перед рядком '2' конвертує його в число 2.
+'40' + +'2': Додаємо отримані числа: 40 + 2 = 42.
'42' + "hillel": Конкатенація числа 42 і рядка "hillel".
Консоль виводить: 42hillel
 */


// 5) '10' - 5 === 6
let result5 = '10' - 5 === 6;
console.log(result5);
/*
У цьому виразі використовуються оператори віднімання (-) і строгого порівняння (===).
'10' - 5: Рядок '10' конвертується в число 10, і потім виконується віднімання: 10 - 5 = 5.
5 === 6: Порівняння числа 5 з числом 6. Оскільки вони не рівні, вираз повертає false.
Консоль виводить: false
 */


// 6) true + false
let result6 = true + false
console.log(result6);
/*
Якщо використовувати арифметичні операції з логічними значеннями, true трактується як 1, а false як 0.
Отже, вираз true + false еквівалентний 1 + 0, і результатом є число 1.
Консоль виводить: 1
 */


// 7) '4px' - 3
let result7 = '4px' - 3
console.log(result7);
/*
JavaScript спробує автоматично конвертувати рядок '4px' в число для виконання віднімання.
Однак, оскільки перше значення в рядку - це букви 'px', а не число, конвертація буде невдалою,
і результатом буде спеціальне значення NaN (Not-a-Number).
Отже, результатом виразу '4px' - 3 є NaN, оскільки віднімання не може бути виконано правильно через наявність літер у першому операнді.
Консоль виводить: NaN
 */


// 8) '4' - 3
let result8 = '4' - 3
console.log(result8);
/*
JavaScript автоматично конвертує рядок '4' в число перед виконанням віднімання.
Таким чином, рядок '4' перетворюється в число 4, і потім виконується віднімання 4 - 3, що дає результат 1.
Консоль виводить: 1
 */


// 9) '6' + 3 ** 0
let result9 = '6' + 3 ** 0;
console.log(result9);
/*
У виразі '6' + 3 ** 0 використовується арифметичний оператор конкатенації (+) та операція піднесення до ступеня (**).
3 ** 0: Операція піднесення до ступеня. Будь яке число, підняте до ступеня 0, дорівнює 1. Таким чином, 3 ** 0 дорівнює 1.
'6' + 1: Рядок '6' конкатенується з числом 1. Так як один із операндів є рядком, відбувається конкатенація рядків,
і результатом є рядок '61'.
Зауважую, що різниця з прикладом 8 полягає у тому, що якщо додаються (+) числа то JavaScript їх просто додає, але якщо
додаються (+) рядок і число то JavaScript конкатенує рядок з числом. Якщо віднімання то JavaScript намагається перетворити
рядок на число і якщо виходить то здійснює арифметичне віднімання.
Консоль виводить: 61
 */


// 10) 12 / '6'
let result10 = 12 / '6'
console.log(result10);
/*
У виразі 12 / '6' використовується арифметичний оператор ділення (/).
JavaScript автоматично конвертує рядок '6' в число перед виконанням ділення.
Таким чином, рядок '6' перетворюється в число 6, і потім виконується ділення 12 / 6, що дає результат 2.
Консоль виводить: 2
 */


// 11) '10' + (5 === 6)
let result11 = '10' + (5 === 6);
console.log(result11);
/*
Тут використовується операція конкатенації рядків (+) та порівняння строгої рівності (===).
(5 === 6): Вираз у дужках порівнює число 5 з числом 6 за допомогою строгої рівності (===).
Оскільки 5 не дорівнює 6, результат виразу у дужках є false.
'10' + false: Рядок '10' конкатенується з логічним значенням false.
Оскільки один із операндів є рядком, відбувається конкатенація рядків, і результатом є рядок '10false'.
Консоль виводить: 10false
 */


// 12) null == ''
let result12 = null == ''
console.log(result12);
/*
Тут використовується оператор рівності (==), який порівнює два значення за нестрогим рівнянням, тобто з конвертацією типів.
Оператор == спробує конвертувати обидва операнди до одного типу перед порівнянням.
У випадку порівняння null == '', null може бути конвертовано в рядок.
Порожній рядок '' може бути конвертовано в число або булеве значення.
Коли порожній рядок конвертується в число, отримуємо 0. Таким чином, порівняння null == '' еквівалентне порівнянню null == 0.
Важливо відзначити, що в порівнянні null == 0 вони не є рівними.
Оператор == порівнює значення за конвертацією типів, і null не дорівнює 0.
Консоль виводить: false
 */


// 13) 3 ** (9 / 3);
let result13 = 3 ** (9 / 3);
console.log(result13);
/*
Тут використовується операція піднесення до степеня (**).
Вираз у дужках (9 / 3): Виконується операція ділення, результат якої є 3.
Піднесення до степеня 3 ** 3: Операція піднесення числа 3 до степеня 3.
Це означає, що число 3 множить саме на себе тричі. Результат цієї операції є 27.
Консоль виводить: 27
 */


// 14) !!'false' == !!'true'
let result14 = !!'false' == !!'true'
console.log(result14);
/*
У виразі !!'false' == !!'true' використовується логічне перетворення та порівняння двох значень.
Логічне перетворення 'false': Оператор !! використовується для логічного перетворення значення.
Будь-який непорожній рядок вважається true при логічному перетворенні. Отже, !!'false' перетворить рядок 'false' в true.
Логічне перетворення 'true': Те саме відбувається і з рядком 'true'. !!'true' перетворить його в true.
Порівняння true == true: Тепер обидва операнди є true, тому порівняння true == true буде true.
Консоль виводить: true
 */


// 15) 0 || '0' && 1
let result15 = 0 || '0' && 1
console.log(result15);
/*
Оператори && та || мають різний пріоритет. Оператор && має вищий пріоритет, тому він виконується перед ||.
Вираз еквівалентний 0 || ('0' && 1) через пріоритет операторів.
Вираз у дужках '0' && 1: Оператор && поверне другий операнд, бо обидва операнди є істинними. Результат цього виразу буде 1.
Підставимо результат у вихідний вираз: 0 || 1. Оператор || повертає перший істинний операнд. Таким чином, результатом виразу буде 1.
Консоль виводить: 1
 */


// 16) (+null == false) < 1;
let result16 = (+null == false) < 1;
console.log(result16);
/*
Оператор + перетворює null у число, яке дорівнює 0. Порівняння 0 == false вірне, оскільки false, конвертоване у число, також дорівнює 0. Отже, ця частина виразу повертає true.
(true) < 1: Результат попереднього порівняння - true, що у контексті порівняння з числом 1 перетворюється на число 1.
Отже, 1 < 1 не є правдивим, оскільки 1 не менше 1.
Консоль виводить: false
 */


// 17) false && true || true
let result17 = false && true || true
console.log(result17);
/*
Оператор && (логічне "І"): Цей оператор повертає значення першого хибного (false) операнду, якщо обидва операнди є хибними.
Якщо перший операнд є істинним (true), він повертає значення другого операнду.
У цьому виразі false && true, перший операнд false є хибним, тому результатом цього виразу є false.
Оператор || (логічне "АБО"): Цей оператор повертає значення першого істинного операнду або значення другого операнду, якщо перший є хибним.
Таким чином, результат виразу false && true || true буде значенням другого операнду true.
Консоль виводить: true
 */


// 18) false && (false || true);
let result18 = false && (false || true);
console.log(result18);
/*
Вираз у дужках (false || true): Оператор || (логічне "АБО") поверне true, оскільки хоча перший операнд false,
другий операнд true. Результат виразу у дужках буде true.
Логічне "І" між false та (false || true): Оператор && (логічне "І") повертає значення першого хибного (false) операнду,
якщо обидва операнди є хибними. В іншому випадку, він повертає значення другого операнду.
У нашому випадку перший операнд false, тому результат виразу false && (false || true) буде false.
Консоль виводить: false
 */


// 19) (+null == false) < 1 ** 5;
let result19 = (+null == false) < 1 ** 5;
console.log(result19);
/*
(+null == false): Операція (+) конвертує null у число, яке дорівнює 0. Порівняння 0 == false дає true, оскільки при
порівнянні логічне false перетворюється в число 0, тому 0 дорівнює 0.
1 ** 5: Це піднесення числа 1 до степеня 5, що дорівнює 1.
Отже, вираз (+null == false) < 1 ** 5 перетворюється в true < 1.
У JavaScript значення true у контексті порівняння автоматично перетворюється в число 1, тоді як false перетворюється в 0.
Отже, 1 < 1 - це неправда, оскільки 1 не менше 1. Тому результат виразу (+null == false) < 1 ** 5 буде false.
Консоль виводить: false
 */